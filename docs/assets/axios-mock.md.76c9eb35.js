import{o as n,c as s,a}from"./app.2f713d2d.js";const p='{"title":"接口联调与 Mock","description":"","frontmatter":{},"headers":[{"level":2,"title":"接口联调","slug":"接口联调"},{"level":3,"title":"设置 baseURL","slug":"设置-baseurl"},{"level":3,"title":"调用","slug":"调用"},{"level":3,"title":"拦截器","slug":"拦截器"},{"level":3,"title":"跨域","slug":"跨域"},{"level":2,"title":"Mock 服务","slug":"mock-服务"},{"level":3,"title":"开发环境 mock","slug":"开发环境-mock"},{"level":3,"title":"生产环境 mock","slug":"生产环境-mock"}],"relativePath":"axios-mock.md","lastUpdated":1626006835134}',t={},o=a('<h1 id="接口联调与-mock"><a class="header-anchor" href="#接口联调与-mock" aria-hidden="true">#</a> 接口联调与 Mock</h1><h2 id="接口联调"><a class="header-anchor" href="#接口联调" aria-hidden="true">#</a> 接口联调</h2><p>框架使用 <a href="https://axios-http.com/" target="_blank" rel="noopener noreferrer">Axios</a> 做为异步请求工具，并进行了简单的封装。</p><h3 id="设置-baseurl"><a class="header-anchor" href="#设置-baseurl" aria-hidden="true">#</a> 设置 baseURL</h3><p>在 <code>.env.development</code> 文件里设置 <code>VITE_APP_API_BASEURL</code> 。</p><p>例如项目的真实接口请求地址为：</p><ul><li><code>http://api.test.com/news/list</code></li><li><code>http://api.test.com/news/add</code></li><li><code>http://api.test.com/shop/info</code></li></ul><p>则可设置为 <code>VITE_APP_API_BASEURL = http://api.test.com/</code> 。</p><h3 id="调用"><a class="header-anchor" href="#调用" aria-hidden="true">#</a> 调用</h3><p>可使用 <code>this.$api.get()</code> 或 <code>this.$api.post()</code> 调用接口。依旧用上面的例子举例，如果要请求 <code>http://api.test.com/news/list</code> 和 <code>http://api.test.com/news/add</code> 这个 2 个接口，代码如下：</p><div class="language-js"><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;news/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span>\n        page<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        size<span class="token operator">:</span> <span class="token number">10</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 后续业务代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;news/add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;新闻标题&#39;</span><span class="token punctuation">,</span>\n    content<span class="token operator">:</span> <span class="token string">&#39;新闻内容&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 后续业务代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="拦截器"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h3><p>在 <code>./src/api/index.js</code> 文件里实例化了 axios 对象，并对 <code>request</code> 和 <code>response</code> 设置了拦截器，拦截器的用处就是拦截每一次的请求和响应，然后做一些全局的处理。例如接口响应报错，可以在拦截器里用统一的报错提示来展示，方便业务开发。但因为每个公司提供的接口标准不同，所以该文件拦截器部分的代码，需要开发者根据实际情况去修改调整。</p><p>代码很简单，首先初始化 axios 对象，然后 <code>axios.interceptors.request.use()</code> 和 <code>axios.interceptors.response.use()</code> 就分别是请求和响应的拦截代码了。</p><p>参考代码里只做了简单的拦截处理，例如请求的时候会自动带上 token ，响应的时候会根据错误信息判断是登录失效还是接口报错，并做相应动作。</p><h3 id="跨域"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h3><p>生产环境的跨域需要服务端去解决，开发环境的跨域问题可在本地设置代理解决。如果本地开发环境请求接口提示跨域，可以设置 <code>.env.development</code> 文件里的 <code>VITE_OPEN_PROXY</code> 开启代理。</p><div class="language-js"><pre><code><span class="token comment">// 开启代理后</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;news/list&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// http://localhost:3000/proxy/news/list</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;news/add&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// http://localhost:3000/proxy/news/add</span>\n</code></pre></div><p>开启代理后，原有请求都会被指向到本地 <code>http://localhost:3000/proxy</code> ，因为 <code>/proxy</code> 匹配到了 vite.config.js 里代理部分的设置，所以实际是请求依旧是 <code>VITE_APP_API_BASEURL</code> 所设置的地址。</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js 中 proxy 配置，该配置即用于代理 API 请求</span>\nserver<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;/proxy&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            target<span class="token operator">:</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">VITE_APP_API_BASEURL</span><span class="token punctuation">,</span>\n            changeOrigin<span class="token operator">:</span> command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">VITE_OPEN_PROXY</span> <span class="token operator">==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token parameter">path</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/proxy</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="mock-服务"><a class="header-anchor" href="#mock-服务" aria-hidden="true">#</a> Mock 服务</h2><p>Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>模板使用 <a href="https://github.com/anncwb/vite-plugin-mock" target="_blank" rel="noopener noreferrer">vite-plugin-mock</a> 提供开发和生产模拟服务。</p><p>Mock 数据编写规则请阅读 <a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener noreferrer">Mockjs</a> 官方文档。</p></div><h3 id="开发环境-mock"><a class="header-anchor" href="#开发环境-mock" aria-hidden="true">#</a> 开发环境 mock</h3><p>mock 文件存放在 <code>./src/mock/</code> 下，建议按照不同模块区分文件夹。文件新增或修改后会自动更新，不需要手动重启，可以在代码控制台查看日志信息。</p><p>以下为示例代码：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        url<span class="token operator">:</span> <span class="token string">&#39;/mock/news/list&#39;</span><span class="token punctuation">,</span>\n        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> query <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                error<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n                status<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                data<span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token string">&#39;list|5-10&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                        <span class="token punctuation">{</span>\n                            <span class="token string">&#39;title&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@ctitle&#39;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>参数获取：</p><ul><li>GET：<code>({ query }) =&gt; { }</code></li><li>POST：<code>({ body }) =&gt; { }</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>为了让 mock 接口与真实接口共存，即项目开发中，部分请求 mock 接口，部分请求真实接口。</p><p>需要在配置 mock 接口的时候，给 <code>url</code> 参数统一设置 <code>/mock/</code> 前缀，并在调用接口的时候，使用 <code>baseURL</code> 强制修改此次请求的地址。</p><p>如下所示，其中 <code>news/list</code> 会请求本地的 mock 接口，而 <code>news/add</code> 依旧请求真实接口，即使开启跨域代理也不影响。</p><div class="language-js"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;news/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tbaseURL<span class="token operator">:</span> <span class="token string">&#39;/mock/&#39;</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span>\n        page<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        size<span class="token operator">:</span> <span class="token number">10</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 后续业务代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;news/add&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;新闻标题&#39;</span><span class="token punctuation">,</span>\n    content<span class="token operator">:</span> <span class="token string">&#39;新闻内容&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 后续业务代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div></div><h3 id="生产环境-mock"><a class="header-anchor" href="#生产环境-mock" aria-hidden="true">#</a> 生产环境 mock</h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>生产环境一般都是调用真实接口，如果需要使用 mock 也只适用于一些简单的示例网站及预览网站。</p></div><p>模版默认已经配置好生产环境 mock ，如果不想在生产环境使用 mock ，可在接口调用处删除 baseURL 设置，或直接删除 mock 接口文件。</p><p>开发环境与生产环境使用 mock 差异不大，比较大的区别是生产环境里调用 mock 接口，在控制台内看不到接口请求日志。</p><p>更多介绍请移步 <a href="https://github.com/anncwb/vite-plugin-mock" target="_blank" rel="noopener noreferrer">vite-plugin-mock</a></p>',35);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
