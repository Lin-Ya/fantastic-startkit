"use strict";(self.webpackChunkfantastic_template_docs=self.webpackChunkfantastic_template_docs||[]).push([[478],{1428:(e,o,t)=>{t.r(o),t.d(o,{data:()=>c});const c={key:"v-094c46b0",path:"/guide/plop.html",title:"代码文件自动生成",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"page",slug:"page",children:[]},{level:2,title:"component",slug:"component",children:[]},{level:2,title:"store",slug:"store",children:[]}],filePathRelative:"guide/plop.md",git:{updatedTime:null,contributors:[]}}},8158:(e,o,t)=>{t.r(o),t.d(o,{default:()=>u});var c=t(1655);const a=(0,c._)("h1",{id:"代码文件自动生成",tabindex:"-1"},[(0,c._)("a",{class:"header-anchor",href:"#代码文件自动生成","aria-hidden":"true"},"#"),(0,c.Uk)(" 代码文件自动生成")],-1),d=(0,c._)("p",null,"开发过程中，避免不了手动去频繁创建页面、组件等文件，并且还要在文件里写一些必要的代码，是不是觉得很麻烦？现在你可以用更简洁的方式来处理这一切。",-1),n={class:"custom-container tip"},l=(0,c._)("p",{class:"custom-container-title"},"说明",-1),p=(0,c.Uk)("该功能基于 "),r={href:"https://www.npmjs.com/package/plop",target:"_blank",rel:"noopener noreferrer"},i=(0,c.Uk)("plop"),s=(0,c.Uk)(" 实现，在扩展新的模式前，请先详细阅读 plop 文档。"),h=(0,c.uE)('<p>模板默认提供了 3 种模式，通过 <code>pnpm run new</code> 指令可以自行选择。</p><ul><li><code>page</code> 页面文件</li><li><code>component</code> 组件文件</li><li><code>store</code> 全局状态文件</li></ul><p>除了模板提供的 3 种模式，你还可以自定义新的模式，其原理就是通过预设模板，按照特定规则创建文件或者文件夹。</p><p>预设模板文件存放在 <code>./plop-templates/</code> 目录下，并在 <code>./plopfile.js</code> 文件里进行引用，你可以参考现有 3 种模式的目录结构进行创建新的模板。</p><h2 id="page" tabindex="-1"><a class="header-anchor" href="#page" aria-hidden="true">#</a> page</h2><p>page 模式下，只能在 <code>/src/views/</code> 目录下选择指定的文件夹进行生成，生成的文件中，部分关键位置会被替换掉，例如 <code>&lt;page-header /&gt;</code> 中的 <code>title</code> 会按照你输入的中文名称替换，页面的 <code>name</code> 会根据当前文件目录和文件名自动生成，确保唯一。</p><h2 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> component</h2><p>component 模式可以选择生成的是全局组件还是局部组件，全局组件生成目录为 <code>/src/components/</code> ，局部组件则在 <code>/src/views/</code> 目录下选择指定的文件夹进行生成。</p><h2 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> store</h2><p>store 模式则会在 <code>/src/store/modules/</code> 目录下生成一个空模板。</p>',10),u={render:function(e,o){const t=(0,c.up)("OutboundLink");return(0,c.wg)(),(0,c.iD)(c.HY,null,[a,d,(0,c._)("div",n,[l,(0,c._)("p",null,[p,(0,c._)("a",r,[i,(0,c.Wm)(t)]),s])]),h],64)}}}}]);