"use strict";(self.webpackChunkfantastic_template_docs=self.webpackChunkfantastic_template_docs||[]).push([[719],{7325:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-3223dddc",path:"/axios.html",title:"与服务端交互",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"接口请求",slug:"接口请求",children:[{level:3,title:"设置 baseURL",slug:"设置-baseurl",children:[]},{level:3,title:"请求调用",slug:"请求调用",children:[]},{level:3,title:"拦截器",slug:"拦截器",children:[]}]},{level:2,title:"跨域处理",slug:"跨域处理",children:[]},{level:2,title:"Mock",slug:"mock",children:[{level:3,title:"开发环境 mock",slug:"开发环境-mock",children:[]},{level:3,title:"生产环境 mock",slug:"生产环境-mock",children:[]}]}],filePathRelative:"axios.md",git:{updatedTime:1627204102e3,contributors:[{name:"hooray",email:"304327508@qq.com",commits:1}]}}},6192:(n,s,a)=>{a.r(s),a.d(s,{default:()=>R});var t=a(1655);const e=(0,t._)("h1",{id:"与服务端交互",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#与服务端交互","aria-hidden":"true"},"#"),(0,t.Uk)(" 与服务端交互")],-1),p=(0,t.Uk)("模板使用 "),o={href:"https://axios-http.com/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("Axios"),l=(0,t.Uk)(" 做为异步请求工具，并进行了简单的封装。"),u=(0,t.uE)('<h2 id="接口请求" tabindex="-1"><a class="header-anchor" href="#接口请求" aria-hidden="true">#</a> 接口请求</h2><h3 id="设置-baseurl" tabindex="-1"><a class="header-anchor" href="#设置-baseurl" aria-hidden="true">#</a> 设置 baseURL</h3><p>在根目录 <code>.env.*</code> 文件里的 <code>VITE_APP_API_BASEURL</code> 这个参数就是配置 axios 的 <code>baseURL</code> 。</p><p>例如项目的真实接口请求地址为：</p><ul><li><code>http://api.test.com/news/list</code></li><li><code>http://api.test.com/news/create</code></li><li><code>http://api.test.com/shop/info</code></li></ul><p>则可设置为 <code>VITE_APP_API_BASEURL = http://api.test.com/</code> 。</p><h3 id="请求调用" tabindex="-1"><a class="header-anchor" href="#请求调用" aria-hidden="true">#</a> 请求调用</h3><p>常用的 get 和 post 请求可使用以下的方法：</p>',8),i=(0,t._)("div",{class:"language-javascript ext-js"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("$api"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"get"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'news/list'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    params"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n        page"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"1"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n        size"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token number"},"10"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token punctuation"},"}"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"then"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"res"),(0,t.Uk)(),(0,t._)("span",{class:"token operator"},"=>"),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 后续业务代码"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])])],-1),r=(0,t._)("div",{class:"language-javascript ext-js"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("$api"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"post"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'news/create'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)(),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    title"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'新闻标题'"),(0,t._)("span",{class:"token punctuation"},","),(0,t.Uk)("\n    content"),(0,t._)("span",{class:"token operator"},":"),(0,t.Uk)(),(0,t._)("span",{class:"token string"},"'新闻内容'"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"then"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token parameter"},"res"),(0,t._)("span",{class:"token operator"},"=>"),(0,t._)("span",{class:"token punctuation"},"{"),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token comment"},"// 后续业务代码"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token punctuation"},"}"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("\n")])])],-1),k=(0,t.uE)('<h3 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h3><p>在 <code>/src/api/index.js</code> 文件里实例化了 axios 对象，并对 <code>request</code> 和 <code>response</code> 设置了拦截器，拦截器的用处就是拦截每一次的请求和响应，然后做一些全局的处理。例如接口响应报错，可以在拦截器里用统一的报错提示来展示，方便业务开发。但因为每个公司提供的接口标准不同，所以该文件拦截器部分的代码，需要开发者根据实际情况去修改调整。</p><p>代码很简单，首先初始化 axios 对象，然后 <code>axios.interceptors.request.use()</code> 和 <code>axios.interceptors.response.use()</code> 就分别是请求和响应的拦截代码了。</p><p>参考代码里只做了简单的拦截处理，例如请求的时候会自动带上 token ，响应的时候会根据错误信息判断是登录失效还是接口报错，并做相应动作。</p><h2 id="跨域处理" tabindex="-1"><a class="header-anchor" href="#跨域处理" aria-hidden="true">#</a> 跨域处理</h2><p>生产环境的跨域需要服务端去解决，开发环境的跨域问题可在本地设置代理解决。如果本地开发环境请求接口提示跨域，可以设置 <code>.env.development</code> 文件里 <code>VITE_OPEN_PROXY = true</code> 开启代理。</p>',6),d=(0,t._)("div",{class:"language-javascript ext-js"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("$api"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"get"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'news/list'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// http://localhost:3000/proxy/news/list"),(0,t.Uk)("\n")])])],-1),m=(0,t._)("div",{class:"language-javascript ext-js"},[(0,t._)("pre",{class:"language-javascript"},[(0,t._)("code",null,[(0,t._)("span",{class:"token keyword"},"this"),(0,t._)("span",{class:"token punctuation"},"."),(0,t.Uk)("$api"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"post"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token string"},"'news/add'"),(0,t._)("span",{class:"token punctuation"},")"),(0,t.Uk)("  "),(0,t._)("span",{class:"token comment"},"// http://localhost:3000/proxy/news/add"),(0,t.Uk)("\n")])])],-1),_=(0,t.uE)('<p>开启代理后，原有请求都会被指向到本地 <code>http://localhost:3000/proxy</code> ，因为 <code>/proxy</code> 匹配到了 vite.config.js 里代理部分的设置，所以实际是请求依旧是 <code>VITE_APP_API_BASEURL</code> 所设置的地址。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js 中 proxy 配置，该配置即用于代理 API 请求</span>\nserver<span class="token operator">:</span> <span class="token punctuation">{</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&#39;/proxy&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            target<span class="token operator">:</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">VITE_APP_API_BASEURL</span><span class="token punctuation">,</span>\n            changeOrigin<span class="token operator">:</span> command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">loadEnv</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">VITE_OPEN_PROXY</span> <span class="token operator">==</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token parameter">path</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/proxy</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> Mock</h2><p>Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞。</p>',4),h={class:"custom-container tip"},g=(0,t._)("p",{class:"custom-container-title"},"TIP",-1),b=(0,t.Uk)("模板使用 "),v={href:"https://github.com/anncwb/vite-plugin-mock",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Uk)("vite-plugin-mock"),U=(0,t.Uk)(" 提供开发和生产模拟服务。"),x=(0,t.Uk)("Mock 数据编写规则请阅读 "),w={href:"https://github.com/nuysoft/Mock",target:"_blank",rel:"noopener noreferrer"},j=(0,t.Uk)("Mockjs"),y=(0,t.Uk)(" 官方文档。"),P=(0,t.uE)('<h3 id="开发环境-mock" tabindex="-1"><a class="header-anchor" href="#开发环境-mock" aria-hidden="true">#</a> 开发环境 mock</h3><p>mock 文件存放在 <code>/src/mock/</code> 下，建议按照不同模块区分文件夹。文件新增或修改后会自动更新，不需要手动重启，可以在代码控制台查看日志信息。</p><p>以下为示例代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        url<span class="token operator">:</span> <span class="token string">&#39;/mock/news/list&#39;</span><span class="token punctuation">,</span>\n        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">response</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> query <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                error<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n                status<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                data<span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token string">&#39;list|5-10&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                        <span class="token punctuation">{</span>\n                            <span class="token string">&#39;title&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@ctitle&#39;</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>参数获取：</p><ul><li>GET：<code>({ query }) =&gt; { }</code></li><li>POST：<code>({ body }) =&gt; { }</code></li></ul><p>为了让 mock 接口与真实接口共存，即项目开发中，部分请求 mock 接口，部分请求真实接口。需要在配置 mock 接口的时候，给 <code>url</code> 参数统一设置 <code>/mock/</code> 前缀，并在调用接口的时候，使用 <code>baseURL</code> 强制修改此次请求的地址。</p><p>如下所示，其中 <code>news/list</code> 会请求本地的 mock 接口，而 <code>news/add</code> 依旧请求真实接口，即使开启跨域代理也不影响。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;news/list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tbaseURL<span class="token operator">:</span> <span class="token string">&#39;/mock/&#39;</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span>\n        page<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        size<span class="token operator">:</span> <span class="token number">10</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 后续业务代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;news/create&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;新闻标题&#39;</span><span class="token punctuation">,</span>\n    content<span class="token operator">:</span> <span class="token string">&#39;新闻内容&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 后续业务代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div></div><h3 id="生产环境-mock" tabindex="-1"><a class="header-anchor" href="#生产环境-mock" aria-hidden="true">#</a> 生产环境 mock</h3><div class="custom-container warning"><p class="custom-container-title">注意</p><p>生产环境一般都是调用真实接口，如果需要使用 mock 也只适用于一些简单的示例网站及预览网站。</p></div><p>模板默认已经配置好生产环境 mock ，如果不想在生产环境使用 mock ，可在接口调用处删除 baseURL 设置，或直接删除 mock 接口文件。</p><p>开发环境与生产环境使用 mock 差异不大，比较大的区别是生产环境里调用 mock 接口，在控制台内看不到接口请求日志。</p>',13),E=(0,t.Uk)("更多介绍请移步 "),A={href:"https://github.com/anncwb/vite-plugin-mock",target:"_blank",rel:"noopener noreferrer"},I=(0,t.Uk)("vite-plugin-mock"),R={render:function(n,s){const a=(0,t.up)("OutboundLink"),R=(0,t.up)("CodeGroupItem"),L=(0,t.up)("CodeGroup");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,(0,t._)("a",o,[c,(0,t.Wm)(a)]),l]),u,(0,t.Wm)(L,null,{default:(0,t.w5)((()=>[(0,t.Wm)(R,{title:"get"},{default:(0,t.w5)((()=>[i])),_:1}),(0,t.Wm)(R,{title:"post"},{default:(0,t.w5)((()=>[r])),_:1})])),_:1}),k,(0,t.Wm)(L,null,{default:(0,t.w5)((()=>[(0,t.Wm)(R,{title:"get"},{default:(0,t.w5)((()=>[d])),_:1}),(0,t.Wm)(R,{title:"post"},{default:(0,t.w5)((()=>[m])),_:1})])),_:1}),_,(0,t._)("div",h,[g,(0,t._)("p",null,[b,(0,t._)("a",v,[f,(0,t.Wm)(a)]),U]),(0,t._)("p",null,[x,(0,t._)("a",w,[j,(0,t.Wm)(a)]),y])]),P,(0,t._)("p",null,[E,(0,t._)("a",A,[I,(0,t.Wm)(a)])])],64)}}}}]);